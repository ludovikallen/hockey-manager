name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Is this a prerelease?'
        type: boolean
        default: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21' # Adjust according to your Spring Boot version

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm ci

      - name: Update version
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Build Spring Boot app
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            ./mvnw.cmd clean package -Pproduction
          else
            ./mvnw clean package -Pproduction
          fi
        shell: bash

      - name: Build Electron app
        run: npm run package
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-build
          path: |
            dist/*.dmg
            dist/*.exe
            dist/*.AppImage
            dist/*.snap
            dist/*.deb
            dist/*.rpm
            dist/*.zip
            dist/*.tar.gz
            dist/*.yml
            dist/*.blockmap
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            *-build/*.dmg
            *-build/*.exe
            *-build/*.AppImage
            *-build/*.snap
            *-build/*.deb
            *-build/*.rpm
            *-build/*.zip
            *-build/*.tar.gz
            *-build/*.yml
            *-build/*.blockmap
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
